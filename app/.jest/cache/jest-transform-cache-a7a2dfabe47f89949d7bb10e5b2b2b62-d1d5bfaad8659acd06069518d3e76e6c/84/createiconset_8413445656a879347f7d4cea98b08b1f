27df2f9986e82a101f76937a368fd5b7
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;exports.default = createIconSet;var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");







var _ensureNativeModuleAvailable = _interopRequireDefault(require("./ensure-native-module-available"));
var _createIconSourceCache = _interopRequireDefault(require("./create-icon-source-cache"));
var _iconButton = _interopRequireDefault(require("./icon-button"));var _jsxFileName = "/Users/dbo-vika/Documents/React-Native-To-do-List-main/app/node_modules/react-native-vector-icons/lib/create-icon-set.js";var _excluded = ["name", "size", "color", "style", "children"];function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}

var NativeIconAPI =
_reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;exports.NativeIconAPI = NativeIconAPI;

var DEFAULT_ICON_SIZE = 12;exports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;
var DEFAULT_ICON_COLOR = 'black';exports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;

function createIconSet(
glyphMap,
fontFamily,
fontFile,
fontStyle)
{

  var fontBasename = fontFile ?
  fontFile.replace(/\.(otf|ttf)$/, '') :
  fontFamily;

  var fontReference = _reactNative.Platform.select({
    windows: "/Assets/" + fontFile + "#" + fontFamily,
    android: fontBasename,
    web: fontBasename,
    default: fontFamily });


  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));var

  Icon = function (_PureComponent) {_inherits(Icon, _PureComponent);var _super = _createSuper(Icon);function Icon() {var _this;_classCallCheck(this, Icon);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.
      root = null;_this.





















      handleRef = function (ref) {
        _this.root = ref;
      };return _this;}_createClass(Icon, [{ key: "setNativeProps", value: function setNativeProps(nativeProps) {if (this.root) {this.root.setNativeProps(nativeProps);}} }, { key: "render", value:

      function render() {
        var _this$props = this.props,name = _this$props.name,size = _this$props.size,color = _this$props.color,style = _this$props.style,children = _this$props.children,props = _objectWithoutProperties(_this$props, _excluded);

        var glyph = name ? glyphMap[name] || '?' : '';
        if (typeof glyph === 'number') {
          glyph = String.fromCodePoint(glyph);
        }

        var styleDefaults = {
          fontSize: size,
          color: color };


        var styleOverrides = {
          fontFamily: fontReference,
          fontWeight: 'normal',
          fontStyle: 'normal' };


        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
        props.ref = this.handleRef;

        return (
          _react.default.createElement(_reactNative.Text, _extends({ selectable: false }, props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 91, columnNumber: 9 } }),
          glyph,
          children));


      } }]);return Icon;}(_react.PureComponent);Icon.propTypes = { allowFontScaling: _propTypes.default.bool, name: IconNamePropType, size: _propTypes.default.number, color: _propTypes.default.any, children: _propTypes.default.node, style: _propTypes.default.any };Icon.defaultProps = { size: DEFAULT_ICON_SIZE, allowFontScaling: false };


  var imageSourceCache = (0, _createIconSourceCache.default)();

  function resolveGlyph(name) {
    var glyph = glyphMap[name] || '?';
    if (typeof glyph === 'number') {
      return String.fromCodePoint(glyph);
    }
    return glyph;
  }

  function getImageSourceSync(
  name)


  {var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
    (0, _ensureNativeModuleAvailable.default)();

    var glyph = resolveGlyph(name);
    var processedColor = (0, _reactNative.processColor)(color);
    var cacheKey = glyph + ":" + size + ":" + processedColor;

    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      var imagePath = NativeIconAPI.getImageForFontSync(
      fontReference,
      glyph,
      size,
      processedColor);

      var value = { uri: imagePath, scale: _reactNative.PixelRatio.get() };
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error) {
      imageSourceCache.setError(cacheKey, error);
      throw error;
    }
  }

  function getImageSource(
  name) {var size,color,glyph,processedColor,cacheKey,imagePath,value,_args = arguments;return regeneratorRuntime.async(function getImageSource$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_ICON_SIZE;
            color = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_ICON_COLOR;

            (0, _ensureNativeModuleAvailable.default)();

            glyph = resolveGlyph(name);
            processedColor = (0, _reactNative.processColor)(color);
            cacheKey = glyph + ":" + size + ":" + processedColor;if (!

            imageSourceCache.has(cacheKey)) {_context.next = 8;break;}return _context.abrupt("return",
            imageSourceCache.get(cacheKey));case 8:_context.prev = 8;_context.next = 11;return regeneratorRuntime.awrap(


            NativeIconAPI.getImageForFont(
            fontReference,
            glyph,
            size,
            processedColor));case 11:imagePath = _context.sent;

            value = { uri: imagePath, scale: _reactNative.PixelRatio.get() };
            imageSourceCache.setValue(cacheKey, value);return _context.abrupt("return",
            value);case 17:_context.prev = 17;_context.t0 = _context["catch"](8);

            imageSourceCache.setError(cacheKey, _context.t0);throw _context.t0;case 21:case "end":return _context.stop();}}}, null, null, [[8, 17]], Promise);}




  function loadFont() {var file,_args2 = arguments;return regeneratorRuntime.async(function loadFont$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:file = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : fontFile;if (!(
            _reactNative.Platform.OS === 'ios')) {_context2.next = 7;break;}
            (0, _ensureNativeModuleAvailable.default)();if (
            file) {_context2.next = 5;break;}throw (
              new Error('Unable to load font, because no file was specified. '));case 5:_context2.next = 7;return regeneratorRuntime.awrap(

            NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.'))));case 7:case "end":return _context2.stop();}}}, null, null, null, Promise);}



  function hasIcon(name) {
    return Object.prototype.hasOwnProperty.call(glyphMap, name);
  }

  function getRawGlyphMap() {
    return glyphMap;
  }

  function getFontFamily() {
    return fontReference;
  }

  Icon.Button = (0, _iconButton.default)(Icon);
  Icon.getImageSource = getImageSource;
  Icon.getImageSourceSync = getImageSourceSync;
  Icon.loadFont = loadFont;
  Icon.hasIcon = hasIcon;
  Icon.getRawGlyphMap = getRawGlyphMap;
  Icon.getFontFamily = getFontFamily;

  return Icon;
}