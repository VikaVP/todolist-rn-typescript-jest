2d3aefbc03246faa7c186094313ae7e6
"use strict";












var _EmitterSubscription = _interopRequireDefault(require("./_EmitterSubscription"));

var _EventSubscriptionVendor = _interopRequireDefault(require("./_EventSubscriptionVendor"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}

var sparseFilterPredicate = function sparseFilterPredicate() {return true;};var














EventEmitter = function () {





  function EventEmitter(subscriber) {_classCallCheck(this, EventEmitter);this._subscriber = new _EventSubscriptionVendor.default();
    if (subscriber != null) {
      console.warn('EventEmitter(...): Constructor argument is deprecated.');
      this._subscriber = subscriber;
    }
  }_createClass(EventEmitter, [{ key: "addListener", value:












    function addListener(
    eventType,

    listener,
    context)
    {
      return this._subscriber.addSubscription(
      eventType,
      new _EmitterSubscription.default(this, this._subscriber, listener, context));

    } }, { key: "removeAllListeners", value:








    function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    } }, { key: "removeSubscription", value:




    function removeSubscription(
    subscription)
    {
      console.warn(
      'EventEmitter.removeSubscription(...): Method has been deprecated. ' +
      'Please instead use `remove()` on the subscription itself.');

      this.__removeSubscription(subscription);
    } }, { key: "__removeSubscription", value:




    function __removeSubscription(
    subscription)
    {
      require('invariant')(
      subscription.emitter === this,
      'Subscription does not belong to this emitter.');

      this._subscriber.removeSubscription(subscription);
    } }, { key: "listenerCount", value:








    function listenerCount(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      return subscriptions ?




      subscriptions.filter(sparseFilterPredicate).length :
      0;
    } }, { key: "emit", value:















    function emit(
    eventType)

    {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];


          if (subscription && subscription.listener) {
            subscription.listener.apply(subscription.context, args);
          }
        }
      }
    } }, { key: "removeListener", value:




    function removeListener(
    eventType,

    listener)
    {
      console.warn(
      "EventEmitter.removeListener('" + eventType + "', ...): Method has been " +
      'deprecated. Please instead use `remove()` on the subscription ' +
      'returned by `EventEmitter.addListener`.');

      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];



          if (subscription && subscription.listener === listener) {
            subscription.remove();
          }
        }
      }
    } }]);return EventEmitter;}();


module.exports = EventEmitter;