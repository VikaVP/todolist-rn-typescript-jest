3020b3f2d91badf246d826fda560a0b6










'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}var









EventSubscriptionVendor = function () {







  function EventSubscriptionVendor() {_classCallCheck(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
  }_createClass(EventSubscriptionVendor, [{ key: "addSubscription", value:







    function addSubscription(
    eventType,
    subscription)
    {
      require('invariant')(
      subscription.subscriber === this,
      'The subscriber of the subscription is incorrectly set.');

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    } }, { key: "removeAllSubscriptions", value:







    function removeAllSubscriptions(eventType) {
      if (eventType == null) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    } }, { key: "removeSubscription", value:







    function removeSubscription(
    subscription)
    {
      var eventType = subscription.eventType;
      var key = subscription.key;

      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    } }, { key: "getSubscriptionsForType", value:













    function getSubscriptionsForType(
    eventType)
    {
      return this._subscriptionsForType[eventType];
    } }]);return EventSubscriptionVendor;}();


module.exports = EventSubscriptionVendor;