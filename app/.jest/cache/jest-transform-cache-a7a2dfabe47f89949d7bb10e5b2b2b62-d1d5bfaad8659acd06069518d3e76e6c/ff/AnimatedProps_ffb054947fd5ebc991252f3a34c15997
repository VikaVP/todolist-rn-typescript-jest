472c986054c325d1617a70a65ad2fd4d










'use strict';function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);enumerableOnly && (symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;})), keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = null != arguments[i] ? arguments[i] : {};i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {_defineProperty(target, key, source[key]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _get() {if (typeof Reflect !== "undefined" && Reflect.get) {_get = Reflect.get;} else {_get = function _get(target, property, receiver) {var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {return desc.get.call(arguments.length < 3 ? target : receiver);}return desc.value;};}return _get.apply(this, arguments);}function _superPropBase(object, property) {while (!Object.prototype.hasOwnProperty.call(object, property)) {object = _getPrototypeOf(object);if (object === null) break;}return object;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}var









AnimatedProps = function (_AnimatedNode) {_inherits(AnimatedProps, _AnimatedNode);var _super = _createSuper(AnimatedProps);




  function AnimatedProps(props, callback) {var _this;_classCallCheck(this, AnimatedProps);
    _this = _super.call(this);
    if (props.style) {
      props = _objectSpread(_objectSpread({},
      props), {}, {
        style: new (require('./AnimatedStyle'))(props.style) });

    }
    _this._props = props;
    _this._callback = callback;return _this;
  }_createClass(AnimatedProps, [{ key: "__getValue", value:

    function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          if (!value.__isNative || value instanceof require('./AnimatedStyle')) {


            props[key] = value.__getValue();
          }
        } else if (value instanceof require('../AnimatedEvent').AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    } }, { key: "__getAnimatedValue", value:

    function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    } }, { key: "__attach", value:

    function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__addChild(this);
        }
      }
    } }, { key: "__detach", value:

    function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require('./AnimatedNode')) {
          value.__removeChild(this);
        }
      }
      _get(_getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
    } }, { key: "update", value:

    function update() {
      this._callback();
    } }, { key: "__makeNative", value:

    function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof require('./AnimatedNode')) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    } }, { key: "setNativeView", value:

    function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    } }, { key: "__connectAnimatedView", value:

    function __connectAnimatedView() {
      require('invariant')(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = require('../../Renderer/shims/ReactNative').findNodeHandle(
      this._animatedView);

      require('invariant')(
      nativeViewTag != null,
      'Unable to locate attached view in the native tree');

      require('../NativeAnimatedHelper').API.connectAnimatedNodeToView(
      this.__getNativeTag(),
      nativeViewTag);

    } }, { key: "__disconnectAnimatedView", value:

    function __disconnectAnimatedView() {
      require('invariant')(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = require('../../Renderer/shims/ReactNative').findNodeHandle(
      this._animatedView);

      require('invariant')(
      nativeViewTag != null,
      'Unable to locate attached view in the native tree');

      require('../NativeAnimatedHelper').API.disconnectAnimatedNodeFromView(
      this.__getNativeTag(),
      nativeViewTag);

    } }, { key: "__restoreDefaultValues", value:

    function __restoreDefaultValues() {




      if (this.__isNative) {
        require('../NativeAnimatedHelper').API.restoreDefaultValues(this.__getNativeTag());
      }
    } }, { key: "__getNativeConfig", value:

    function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof require('./AnimatedNode')) {
          value.__makeNative();
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig };

    } }]);return AnimatedProps;}(require('./AnimatedNode'));


module.exports = AnimatedProps;