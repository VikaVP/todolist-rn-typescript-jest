{"version":3,"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","names":["Home","segmentValues","segmentedIndex","setSegmentedIndex","segmentedStatus","setSegmentedStatus","mainList","setMainList","text","setText","filteredList","setFilteredList","handleSegmentedChange","filter","item","completed","handleAdd","Alert","alert","id","Math","random","handleComplete","map","handleDelete","getStorage","_context","AsyncStorage","getItem","jsonValue","setItem","JSON","stringify","storage","parse","console","log","_react","_styles","__self","__source","fileName","lineNumber","columnNumber","_MainInput","placeholder","value","onChange","e","nativeEvent","_AddButton","onPress","_segmentedControl","values","selectedIndex","selectedSegmentIndex","onValueChange","toLowerCase","fontStyle","fontFamily","theme","fonts","regular","activeFontStyle","fontWeight","bold","tintColor","colors","primary","backgroundColor","dark","length","_MainCard","key","onComplete","onDelete"],"sources":["/Users/dbo-vika/Documents/React-Native-To-do-List-main/app/src/screens/Home/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Alert } from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { MainInput } from \"../../components/MainInput\";\nimport { AddButton } from \"../../components/AddButton\";\nimport { MainCard } from \"../../components/MainCard\";\n\nimport SegmentedControl from \"@react-native-segmented-control/segmented-control\";\n\nimport theme from \"../../global/theme\";\n\nimport { Container, Title, FormContainer, CardList, EmptyText } from \"./styles\";\n\ninterface IList {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\ninterface IId {\n  id: number;\n}\n\nfunction Home() {\n  const segmentValues = [\"All\", \"Complete\", \"Incomplete\"];\n\n  const [segmentedIndex, setSegmentedIndex] = useState(0);\n  const [segmentedStatus, setSegmentedStatus] = useState(\"all\");\n  const [mainList, setMainList] = useState<IList[]>([]);\n  const [text, setText] = useState(\"\");\n  const [filteredList, setFilteredList] = useState<IList[]>([]);\n\n  const handleSegmentedChange = () => {\n    switch (segmentedStatus) {\n      case \"complete\":\n        setFilteredList(mainList.filter((item) => item.completed === true));\n\n        break;\n      case \"incomplete\":\n        setFilteredList(mainList.filter((item) => item.completed === false));\n\n        break;\n      default:\n        setFilteredList(mainList);\n\n        break;\n    }\n  };\n\n  function handleAdd() {\n    if (text === \"\") {\n      Alert.alert(\"Insert a text before before adding.\");\n    } else {\n      setMainList([\n        ...mainList,\n        { id: Math.random() * 1000, text: text, completed: false },\n      ]);\n\n      setText(\"\");\n    }\n  }\n\n  function handleComplete({ id }: IId) {\n    setMainList(\n      mainList.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n        return item;\n      })\n    );\n  }\n\n  function handleDelete({ id }: IId) {\n    setMainList(mainList.filter((item) => item.id !== id));\n  }\n\n  const getStorage = async () => {\n    try {\n      let jsonValue = await AsyncStorage.getItem(\"list\");\n\n      if (!jsonValue) {\n        AsyncStorage.setItem(\"list\", JSON.stringify(mainList));\n      } else {\n        let storage = jsonValue && JSON.parse(jsonValue);\n\n        setMainList(storage);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getStorage();\n  }, []);\n\n  useEffect(() => {\n    handleSegmentedChange();\n  }, [segmentedStatus, mainList]);\n\n  useEffect(() => {\n    AsyncStorage.setItem(\"list\", JSON.stringify(mainList));\n  }, [mainList]);\n\n  return (\n    <Container>\n      <Title>To do List</Title>\n\n      <FormContainer>\n        <MainInput\n          placeholder=\"Type here...\"\n          value={text}\n          onChange={(e) => setText(e.nativeEvent.text)}\n        />\n\n        <AddButton onPress={handleAdd} />\n      </FormContainer>\n\n      <SegmentedControl\n        values={segmentValues}\n        selectedIndex={segmentedIndex}\n        onChange={(e) => setSegmentedIndex(e.nativeEvent.selectedSegmentIndex)}\n        onValueChange={(e) => setSegmentedStatus(e.toLowerCase())}\n        fontStyle={{ fontFamily: theme.fonts.regular }}\n        activeFontStyle={{\n          fontWeight: \"normal\",\n          fontFamily: theme.fonts.bold,\n        }}\n        tintColor={theme.colors.primary}\n        backgroundColor={theme.colors.dark}\n      />\n\n      <CardList>\n        {filteredList.length !== 0 ? (\n          filteredList.map((item) => (\n            <MainCard\n              key={item.id}\n              completed={item.completed}\n              text={item.text}\n              onComplete={() => handleComplete(item)}\n              onDelete={() => handleDelete(item)}\n            />\n          ))\n        ) : (\n          <EmptyText>-NO TASKS-</EmptyText>\n        )}\n      </CardList>\n    </Container>\n  );\n}\n\nexport default Home;\n"]}